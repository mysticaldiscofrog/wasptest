app GeoConnect {
  wasp: {
    version: "^0.11.1"
  },
  title: "GeoConnect",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  }
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
  id          Int           @id @default(autoincrement())
  username    String        @unique
  password    String
  profile     Profile       @relation(fields: [profileId], references: [id])
  profileId   Int
  messages    Message[]
  Event       Event[]
  Participant Participant[]
psl=}

entity Profile {=psl
  id                Int    @id @default(autoincrement())
  location          String
  interests         String
  radiusOfDiscovery Int
  description       String
  User              User[]
psl=}

entity Event {=psl
  id          Int           @id @default(autoincrement())
  title       String
  description String
  location    String
  time        DateTime
  creator     User          @relation(fields: [userId], references: [id])
  userId      Int
  Participant Participant[]
psl=}

entity Participant {=psl
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
psl=}

entity Message {=psl
  id      Int      @id @default(autoincrement())
  content String
  time    DateTime
  sender  User     @relation(fields: [userId], references: [id])
  userId  Int
psl=}

action createProfile {
  fn: import { createProfile } from "@server/actions.js",
  entities: [Profile]
}

action createEvent {
  fn: import { createEvent } from "@server/actions.js",
  entities: [Event]
}

action joinEvent {
  fn: import { joinEvent } from "@server/actions.js",
  entities: [Event, Participant]
}

action createMessage {
  fn: import { createMessage } from "@server/actions.js",
  entities: [Message]
}

query getProfile {
  fn: import { getProfile } from "@server/queries.js",
  entities: [Profile]
}

query getEvent {
  fn: import { getEvent } from "@server/queries.js",
  entities: [Event]
}

query getMessages {
  fn: import { getMessages } from "@server/queries.js",
  entities: [Message]
}

query getNearbyEvents {
  fn: import { getNearbyEvents } from "@server/queries.js",
  entities: [Event]
}

route ProfileRoute { path: "/profile/:profileId", to: ProfilePage }
page ProfilePage {
  component: import { Profile } from "@client/pages/Profile.jsx",
  authRequired: true
}

route EventRoute { path: "/event/:eventId", to: EventPage }
page EventPage {
  component: import { Event } from "@client/pages/Event.jsx",
  authRequired: true
}

route MessagesRoute { path: "/messages", to: MessagesPage }
page MessagesPage {
  component: import { Messages } from "@client/pages/Messages.jsx",
  authRequired: true
}

route NearbyEventsRoute { path: "/", to: NearbyEventsPage }
page NearbyEventsPage {
  component: import { NearbyEvents } from "@client/NearbyEvents.jsx",
  authRequired: true
}